services:
  http_server:
    build:
      dockerfile: http_server/Dockerfile
    ports:
      - 8080:8080
    env_file: .env
    depends_on:
      consumer:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: curl --fail -X GET http://http_server:8080/health || exit 1
      interval: 3s
      timeout: 3s
      retries: 1

  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5430:5432"
    volumes:
      - /home/${USER}/.pgdata:/var/lib/postgresql/data/pgdata
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d postgres_db" ]
      interval: 12s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    tty: true
    stdin_open: true

  redis:
    image: redis:latest
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    ports:
      - "6380:6379"
    volumes:
      - /home/${USER}/.redisdata:/data
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 12s
      timeout: 10s
      retries: 3

  broker:
    image: "rabbitmq:3-management"
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 25s
      timeout: 30s
      retries: 3

  consumer:
    build:
      dockerfile: consumers/code_processor/Dockerfile
    env_file: .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      broker:
        condition: service_healthy

  prometheus:
    image: prom/prometheus
    ports:
    - 9090:9090
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'

  grafana:
    image: grafana/grafana
    ports:
    - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_PASSWORD}
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/main_dashboard.json
    volumes:
      - ./grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources

  tester:
    build:
      dockerfile: tests/Dockerfile
    environment:
      - HTTP_HOST=${HTTP_HOST}
      - HTTP_PORT=${HTTP_PORT}
    profiles:
      - test
    depends_on:
      http_server:
        condition: service_healthy
